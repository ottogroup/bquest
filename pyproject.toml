[tool.poetry]
name = "bquest"
version = "0.4.0"
description = "Effortlessly validate and test your Google BigQuery queries with the power of pandas DataFrames in Python."
authors = ["Otto Group data.works GmbH"]
license = "Apache Software License"
readme = "README.rst"
include = [
    "LICENSE",
    "CHANGELOG.rst"
]
repository = "https://github.com/ottogroup/bquest"
documentation = "https://ottogroup.github.io/bquest/"

keywords = [
    "open-source",
    "google-big-query",
    "query",
    "sql",
    "testing",
    "pandas"
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: Apache Software License",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Topic :: Database",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Testing :: Unit",
    "Topic :: Utilities",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS"
]

[tool.poetry.urls]
"Issues" = "https://github.com/ottogroup/bquest/issues"
"Releases" = "https://github.com/ottogroup/bquest/releases"

[tool.poetry.dependencies]
python = "^3.10"

google-cloud-bigquery   = { version = "^3.8", extras = ["bqstorage", "pandas"] }
pandas                  = "^2.0"
pandas-gbq              = "^0.19"
sqlvalidator            = "^0.0.20"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black                   = "^22.10.0"
mypy                    = "^1.3.0"
poethepoet              = "^0.20.0"
ruff                    = "^0.0.271"
types-mock              = "^5.0.0.6"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage                = { version = "^6.0", extras = ["toml"] }
mock                    = "^5.0.2"
pytest                  = "^7.3.1"
pytest-cov              = "^4.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mike                    = "^1.1.2"
mkdocs                  = "^1.4.3"
mkdocs-material         = "^9.1.15"
mkdocstrings-python     = "^1.1.2"

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

select = [
    # Bandit
    "S",
    # Bugbear
    "B",
    # Builtins
    "A",
    # comprehensions
    "C4",
    # eradicate
    "ERA",
    # flake8-2020
    "YTT",
    # isort
    "I",
    # print
    "T20",
    # Pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # return
    "RET",
]

[tool.poe.tasks]
# Linting and formatting.
lint = ["ruff", "black-check"]
ruff = "ruff ."
black-check = "black --check ."

format = ["black-fix", "isort-fix"]
black-fix = "black ."
isort-fix = "ruff --fix --select=I ."

type = "mypy --ignore-missing-imports --strict bquest"

[tool.ruff.per-file-ignores]
"**/__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.pytest.ini_options]
log_level = "DEBUG"
markers = [
    "integration: integration tests",
    "unit: unit tests"
]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["bquest"]

[tool.coverage.report]
show_missing = true
fail_under = 0
omit = [
    "tests/*",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
